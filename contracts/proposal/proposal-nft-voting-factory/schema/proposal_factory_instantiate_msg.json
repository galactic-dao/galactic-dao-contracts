{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ProposalFactoryInstantiateMsg",
  "type": "object",
  "required": [
    "config"
  ],
  "properties": {
    "config": {
      "description": "Config associated with the proposal factory",
      "allOf": [
        {
          "$ref": "#/definitions/ProposalFactoryConfig"
        }
      ]
    }
  },
  "definitions": {
    "Asset": {
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "info": {
          "$ref": "#/definitions/AssetInfo"
        }
      }
    },
    "AssetInfo": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "ProposalFactoryConfig": {
      "type": "object",
      "required": [
        "min_quorum_fraction",
        "nft_contract",
        "proposal_code_id",
        "proposal_cost"
      ],
      "properties": {
        "min_quorum_fraction": {
          "description": "Minimum allowed quorum fraction",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "nft_contract": {
          "description": "The NFT contract associated with NFT voting",
          "type": "string"
        },
        "proposal_code_id": {
          "description": "Code ID of the proposal to instantiate",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "proposal_cost": {
          "description": "Cost for creating a proposal",
          "allOf": [
            {
              "$ref": "#/definitions/Asset"
            }
          ]
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
